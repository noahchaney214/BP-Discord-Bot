Capital indexes\n\nWrite a function named capital_indexes. The function takes a single parameter, which is a string. Your function should return a list of all the indexes in the string that have capital letters.\n\nFor example, calling capital_indexes("HeLlO") should return the list [0, 2, 4].
Middle letter\n\nWrite a function named mid that takes a string as its parameter. Your function should extract and return the middle letter. If there is no middle letter, your function should return the empty string.\n\nFor example, mid("abc") should return "b" and mid("aaaa") should return "".
Online status\n\nThe aim of this challenge is, given a dictionary of people's online status, to count the number of people who are online.\nFor example, consider the following dictionary:\n\nstatuses = {\n    "Alice": "online",\n    "Bob": "offline",\n    "Eve": "online",\n}\n\nIn this case, the number of people online is 2.\n\nWrite a function named online_count that takes one parameter. The parameter is a dictionary that maps from strings of names to the string "online" or "offline", as seen above.\n\nYour function should return the number of people who are online.
Randomness\n\nDefine a function, random_number, that takes no parameters. The function must generate a random integer between 1 and 100, both inclusive, and return it.\n\nCalling the function multiple times should (usually) return different numbers.\n\nFor example, calling random_number() some times might first return 42, then 63, then 1.
Type check\n\nWrite a function named only_ints that takes two parameters. Your function should return True if both parameters are integers, and False otherwise.\n\nFor example, calling only_ints(1, 2) should return True, while calling only_ints("a", 1) should return False.
Double letters\n\nThe goal of this challenge is to analyze a string to check if it contains two of the same letter in a row. For example, the string "hello" has l twice in a row, while the string "nono" does not have two identical letters in a row.\n\nDefine a function named double_letters that takes a single parameter. The parameter is a string. Your function must return True if there are two identical letters in a row in the string, and False otherwise.
Adding and removing dots\n\nWrite a function named add_dots that takes a string and adds "." in between each letter. For example, calling add_dots("test") should return the string "t.e.s.t".\n\nThen, below the add_dots function, write another function named remove_dots that removes all dots from a string. For example, calling remove_dots("t.e.s.t") should return "test".\n\nIf both functions are correct, calling remove_dots(add_dots(string)) should return back the original string for any string.\n\n(You may assume that the input to add_dots does not itself contain any dots.)
Counting syllables\n\nDefine a function named count that takes a single parameter. The parameter is a string. The string will contain a single word divided into syllables by hyphens, such as these:\n\n"ho-tel"\n"cat"\n"met-a-phor"\n"ter-min-a-tor"\n\nYour function should count the number of syllables and return it.\n\nFor example, the call count("ho-tel") should return 2.
Anagrams\n\nTwo strings are anagrams if you can make one from the other by rearranging the letters.\n\nWrite a function named is_anagram that takes two strings as its parameters. Your function should return True if the strings are anagrams, and False otherwise.\n\nFor example, the call is_anagram("typhoon", "opython") should return True while the call is_anagram("Alice", "Bob") should return False.
Flatten a list\n\nWrite a function that takes a list of lists and flattens it into a one-dimensional list.\n\nName your function flatten. It should take a single parameter and return a list.\n\nFor example, calling:\n\nflatten([[1, 2], [3, 4]])\n\nShould return the list:\n\n[1, 2, 3, 4]
Min-maxing\n\nDefine a function named largest_difference that takes a list of numbers as its only parameter.\n\nYour function should compute and return the difference between the largest and smallest number in the list.\n\nFor example, the call largest_difference([1, 2, 3]) should return 2 because 3 - 1 is 2.\n\nYou may assume that no numbers are smaller or larger than -100 and 100.
Divisible by 3\n\nDefine a function named div_3 that returns True if its single integer parameter is divisible by 3 and False otherwise.\n\nFor example, div_3(6) is True because 6/3 does not leave any remainder. However div_3(5) is False because 5/3 leaves 2 as a remainder.
Tic tac toe input\n\nHere's the backstory for this challenge: imagine you're writing a tic-tac-toe game, where the board looks like this:\n\n1:  X | O | X\n   -----------\n2:    |   |  \n   -----------\n3:  O |   |\n\n    A   B  C\n\nThe board is represented as a 2D list:\n\nboard = [\n    ["X", "O", "X"],\n    [" ", " ", " "],\n    ["O", " ", " "],\n]\n\nImagine if your user enters "C1" and you need to see if there's an X or O in that cell on the board. To do so, you need to translate from the string "C1" to row 0 and column 2 so that you can check board[row][column].\n\nYour task is to write a function that can translate from strings of length 2 to a tuple (row, column). Name your function get_row_col; it should take a single parameter which is a string of length 2 consisting of an uppercase letter and a digit.\n\nFor example, calling get_row_col("A3") should return the tuple (2, 0) because A3 corresponds to the row at index 2 and column at index 0in the board.
Palindrome\nA string is a palindrome when it is the same when read backwards.\n\nFor example, the string "bob" is a palindrome. So is "abba". But the string "abcd" is not a palindrome, because "abcd" != "dcba".\n\nWrite a function named palindrome that takes a single string as its parameter. Your function should return True if the string is a palindrome, and False otherwise.
Up and down\n\nDefine a function named up_down that takes a single number as its parameter. Your function return a tuple containing two numbers; the first should be one lower than the parameter, and the second should be one higher.\n\nFor example, calling up_down(5) should return (4, 6).
Consecutive zeros\n\nThe goal of this challenge is to analyze a binary string consisting of only zeros and ones. Your code should find the biggest number of consecutive zeros in the string. For example, given the string:\n\n"1001101000110"\n\nThe biggest number of consecutive zeros is 3.\n\nDefine a function named consecutive_zeros that takes a single parameter, which is the string of zeros and ones. Your function should return the number described above.
All equal\n\nDefine a function named all_equal that takes a list and checks whether all elements in the list are the same.\n\nFor example, calling all_equal([1, 1, 1]) should return True.
Boolean and\n\nDefine a function named triple_and that takes three parameters and returns True only if they are all True and False otherwise.
Writing short code\n\nDefine a function named convert that takes a list of numbers as its only parameter and returns a list of each number converted to a string.\n\nFor example, the call convert([1, 2, 3]) should return ["1", "2", "3"].\n\nWhat makes this tricky is that your function body must only contain a single line of code.
Custom zip\n\nThe built-in zip function "zips" two lists. Write your own implementation of this function.\n\nDefine a function named zap. The function takes two parameters, a and b. These are lists.\n\nYour function should return a list of tuples. Each tuple should contain one item from the a list and one from b.\n\nYou may assume a and b have equal lengths.\n\nIf you don't get it, think of a zipper.\n\nFor example:\n\nzap(\n    [0, 1, 2, 3],\n    [5, 6, 7, 8]\n)\n\nShould return:\n\n[(0, 5),\n (1, 6),\n (2, 7),\n (3, 8)]
Solution validation\n\nThe aim of this challenge is to write code that can analyze code submissions. We'll simplify things a lot to not make this too hard.\n\nWrite a function named validate that takes code represented as a string as its only parameter.\n\nYour function should check a few things:\n\n    the code must contain the def keyword\n        otherwise return "missing def"\n    the code must contain the : symbol\n        otherwise return "missing :"\n    the code must contain ( and ) for the parameter list\n        otherwise return "missing paren"\n    the code must not contain ()\n        otherwise return "missing param"\n    the code must contain four spaces for indentation\n        otherwise return "missing indent"\n    the code must contain validate\n        otherwise return "wrong name"\n    the code must contain a return statement\n        otherwise return "missing return"\n\nIf all these conditions are satisfied, your code should return True.\n\nHere comes the twist: your solution must return True when validating itself.
List xor\n\nDefine a function named list_xor. Your function should take three parameters: n, list1 and list2.\n\nYour function must return whether n is exclusively in list1 or list2.\n\nIn other words, if n is in both lists or in none of the lists, return False. If n is in only one of the lists, return True.\n\nFor example:\n\nlist_xor(1, [1, 2, 3], [4, 5, 6]) == True\nlist_xor(1, [0, 2, 3], [1, 5, 6]) == True\nlist_xor(1, [1, 2, 3], [1, 5, 6]) == False\nlist_xor(1, [0, 0, 0], [4, 5, 6]) == False
Counting parameters\n\nDefine a function param_count that takes a variable number of parameters. The function should return the number of arguments it was called with.\n\nFor example, param_count() should return 0, while param_count(2, 3, 4) should return 3.
Thousands separator\n\nWrite a function named format_number that takes a non-negative number as its only parameter.\n\nYour function should convert the number to a string and add commas as a thousands separator.\n\nFor example, calling format_number(1000000) should return "1,000,000".